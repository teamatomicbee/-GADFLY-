Memoria T√©cnica - Robot Sumo Aut√≥nomo Zumo
üìã Descripci√≥n del Proyecto
Robot sumo aut√≥nomo basado en plataforma Zumo, dise√±ado para competir en la categor√≠a mini-sumo. El robot utiliza sensores de distancia infrarrojos para detectar oponentes y sensores de l√≠nea QTR para mantenerse dentro del dohyo (√°rea de competencia).

üöÄ Caracter√≠sticas Principales
Detecci√≥n omnidireccional: 4 sensores Sharp GP2Y0A21YK0F

Control de bordes: 4 sensores de l√≠nea QTR

Estrategia de ataque: Comportamientos diferenciados por direcci√≥n

Sistema de seguridad: Retardo de 5 segundos post-inicio

B√∫squeda inteligente: Patrones aleatorios para localizar oponentes

üõ† Hardware Utilizado
Componentes Principales
Plataforma: Zumo 32U4 Robot

Microcontrolador: ATmega32U4

Motores: 2x motores DC con encoders

Sensores de distancia: 4x Sharp GP2Y0A21YK0F (10-80cm)

Sensores de l√≠nea: 4x QTR Reflectance Sensors

Alimentaci√≥n: Bater√≠a LiPo 3.7V

Esquema de Conexiones
text
SENSORES SHARP:
- Frontal    ‚Üí A0
- Izquierdo  ‚Üí A1  
- Derecho    ‚Üí A2
- Trasero    ‚Üí A3

SENSORES L√çNEA:
- QTR 1 ‚Üí Pin 5
- QTR 2 ‚Üí Pin 6
- QTR 3 ‚Üí Pin 7
- QTR 4 ‚Üí Pin 8

INTERRUPTORES:
- START (Frontal)  ‚Üí Pin 2
- TRASERO Enable  ‚Üí Pin 3
- Reservado       ‚Üí Pin 4
‚öôÔ∏è Configuraci√≥n de Par√°metros
Distancias de Detecci√≥n
cpp
#define OBSTACLE_DISTANCE 30      // Detecci√≥n frontal/lateral (cm)
#define REAR_OBSTACLE_DISTANCE 20 // Detecci√≥n trasera (cm)
#define LINE_THRESHOLD 500        // Umbral l√≠nea blanca/negra
Velocidades de Motor
cpp
#define MAX_SPEED 400             // Ataque frontal
#define REVERSE_SPEED -400        // Retroceso
#define TURN_SPEED 350            // Giro
#define ALIGN_SPEED 200           // Alineaci√≥n fina
#define SEARCH_SPEED 200          // B√∫squeda
üß† Algoritmo de Control
Diagrama de Estados
text
INICIO ‚Üí ESPERA 5s ‚Üí B√öSQUEDA ‚Üí [DETECCI√ìN] ‚Üí ATAQUE
                             ‚Üì
                         EVASI√ìN BORDE
Comportamientos Implementados
Ataque Frontal (attackFront())

Alineaci√≥n fina basada en sensores laterales

Avance a m√°xima velocidad

Ataque Lateral (attackLeft(), attackRight())

Giro de 90¬∞ hacia el oponente

Avance inmediato

Giro 180¬∞ (turnAround())

Activado por sensor trasero (opcional)

Giro completo cuando se detecta oponente por detr√°s

B√∫squeda (searchOpponent())

4 patrones aleatorios cada 1.5 segundos

Incluye: avance, giros y curvas

Evasi√≥n de Bordes (evadeEdge())

Retroceso y giro aleatorio al detectar l√≠nea

Previene salida del dohyo

üìÅ Estructura del C√≥digo
Archivos Principales
text
sumo_robot_zumo/
‚îú‚îÄ‚îÄ sumo_robot_zumo.ino      # C√≥digo principal
‚îú‚îÄ‚îÄ README.md               # Esta documentaci√≥n
‚îú‚îÄ‚îÄ diagrama_conexiones.png # Esquema de conexiones
‚îî‚îÄ‚îÄ librerias.txt          # Dependencias requeridas
Funciones Principales
setup(): Inicializaci√≥n y calibraci√≥n

loop(): L√≥gica principal de control

startRobot(): Secuencia de inicio

Funciones de comportamiento: attackFront(), evadeEdge(), etc.

Funciones auxiliares: readSharpSensor(), checkLineDetection()

üîß Instalaci√≥n y Configuraci√≥n
Requisitos
Arduino IDE 1.8.x o superior

Librer√≠as:

ZumoMotors

QTRSensors

Pasos de Instalaci√≥n
Clonar repositorio

Abrir sumo_robot_zumo.ino en Arduino IDE

Instalar librer√≠as requeridas

Conectar plataforma Zumo v√≠a USB

Seleccionar placa "Arduino Leonardo"

Cargar programa

Calibraci√≥n
Los sensores de l√≠nea se calibran autom√°ticamente al inicio

Ajustar LINE_THRESHOLD seg√∫n condiciones de iluminaci√≥n

Verificar distancias de sensores Sharp con mediciones reales

üéÆ Modo de Uso
Preparaci√≥n:

Colocar robot en centro del dohyo

Activar interruptor de alimentaci√≥n

Inicio:

Presionar bot√≥n frontal (SWITCH_FRONT)

Esperar 5 segundos (cuenta regresiva)

Operaci√≥n:

Robot funciona aut√≥nomamente

Interruptor lateral controla sensor trasero

Robot se detiene autom√°ticamente al salir del dohyo

‚ö†Ô∏è Soluci√≥n de Problemas
Comportamientos Inesperados
Robot no se mueve: Verificar bater√≠a y conexiones de motores

Detecci√≥n err√≥nea: Calibrar sensores de l√≠nea y verificar distancias

Giros imprecisos: Ajustar TURN_SPEED y delays de giro

Ajustes Finos
Modificar OBSTACLE_DISTANCE seg√∫n tama√±o del dohyo

Ajustar velocidades para diferentes superficies

Optimizar umbral de l√≠nea para contraste espec√≠fico

üìä Mejoras Futuras
Implementar PID para seguimiento de oponentes

A√±uir modo de configuraci√≥n v√≠a Bluetooth

Implementar estrategias de emboscada

A√±uir medici√≥n de bater√≠a

Optimizar consumo energ√©tico
